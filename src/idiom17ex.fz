node(T type,
     val T,
     children Sequence (node T)) is

  public redef as_string String => (as_strings 0).as_string "\n"

  as_strings(d i32) =>
    ["+-" + $val] ++ (children.flat_map String (c->c.as_strings d+1)).map s->"| $s"

feuille(val String) => node val (list (node String)).empty

t := node "C" [feuille "C++",
               feuille "C#" ,
               feuille "Go" ,
               node "Java" [feuille "Scala",
                            feuille "Kotlin"],
               node "Perl" [feuille "Ruby",
                            feuille "Raku"],
               node "Python" [feuille "Julia",
                              feuille "Nim"  ]
              ]

say t
