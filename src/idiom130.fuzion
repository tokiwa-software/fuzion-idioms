depth_first_traverse(queue Sequence vertex, visited container.Set vertex) Sequence vertex =>
  match queue.as_list
    nil => (list vertex).empty
    c Cons =>
      # already visited? => skip adding to result
      if visited.contains c.head
        depth_first_traverse c.tail visited
      else
        neighbors := g.neighbors c.head
        # result is the current element, the neighbors and the rest of the visitation queue
        [c.head] ++ depth_first_traverse (neighbors ++ c.tail) (visited.add c.head)

(depth_first_traverse [v1] (container.ps_set vertex).empty).for_each say
